- var topLinePrefix = 'top-'
- var bottomLinePrefix = 'bottom-'
- var left = '-left'
- var right = '-right'
mixin map-item(item, colClass, siblingsCount)
    -var classes=[]
    if (item.children.length > 0)
        -classes.push("parent")
    -classes.push(colClass)
    div.map-col(class = classes)&attributes({'data-target': item.id, 'id': "node-" + item.id, 'data-siblings': siblingsCount})=item.text
//adds empty columns so that single items are always under their parent
mixin single-kid(column, kid)
    if (column > 0)
        div.map-col-blank
    if (column > 1)
        div.map-col-blank
    +map-item(kid, 'col-' + column, 1)
    if(column == 1)
        div.map-col-blank
mixin row(children, id, column)
    div.row-wrapper(class='map-row-' + id)
        +lines(column, children.length, id)
        div.map-row
            +child-cols(children, column)
        +child-rows(children)
mixin child-cols(children, column)
    if (children.length == 1)
        +single-kid(column, children[0])
    else
        each child, index in children
            +map-item(child, 'col-' + index, children.length)
mixin child-rows(children)
    each child, index in children
        if child.children.length > 0
            if index == 1 && children.length == 2
                +row(child.children, child.id, 2)
            else
                +row(child.children, child.id, index)
//lines
mixin lines(column, numberOfChildren, id)
    case column
        when 0
            +left(numberOfChildren, id)
        when 1
            +middle(numberOfChildren, id)
        when 2
            +right(numberOfChildren, id)
mixin right(numberOfChildren, id)
    case numberOfChildren
        when 1
            +right-one(topLinePrefix + id)
            +right-one(bottomLinePrefix + id)
        when 2
            +right-two(id)
        when 3
            +right-three(id)
mixin middle(numberOfChildren ,id)
    case numberOfChildren
        when 1
            +middle-one(topLinePrefix + id + left)
            +middle-one(bottomLinePrefix + id + right)
        when 2
            +middle-two(id)
        when 3
            +middle-three(id)
mixin left(numberOfChildren, id)
    case numberOfChildren
        when 1
            +left-one(topLinePrefix + id)
            +left-one(bottomLinePrefix + id)
        when 2
            +left-two(id)
        when 3
            +left-three(id)

mixin right-three(id)
    +right-one(topLinePrefix + id)
    +three-lines(bottomLinePrefix + id)
mixin right-two(id)
    +right-one(topLinePrefix + id)
    +two-lines(bottomLinePrefix + id)
mixin right-one(prefixedId)
    div.map-lines-row
        div(id=prefixedId + right).map-lines.right.single
mixin middle-one(prefixedId)
    div.map-lines-row
        div(id=prefixedId + left).map-lines.right
        div(id=prefixedId + right).map-lines
mixin middle-two(id)
    +middle-one(topLinePrefix + id)
    +two-lines(bottomLinePrefix + id)
mixin middle-three(id)
    +middle-one(topLinePrefix + id)
    +three-lines(bottomLinePrefix + id)
mixin left-three(id)
    +left-one(topLinePrefix + id)
    +three-lines(bottomLinePrefix + id)
mixin left-two(id)
    +left-one(topLinePrefix + id)
    +two-lines(bottomLinePrefix + id)
mixin left-one(prefixedId)
    div.map-lines-row
        div(id=prefixedId + left).map-lines.left.single
mixin two-lines(prefixedId)
    div.map-lines-row
        div(id=prefixedId + left).map-lines.top.left
        div(id=prefixedId + right).map-lines.top.right
mixin three-lines(prefixedId)
    div.map-lines-row
        div(id=prefixedId + left).map-lines.top.left.right
        div(id=prefixedId + right).map-lines.top.right
